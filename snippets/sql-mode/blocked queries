# -*- mode: snippet -*-
# name: blocked queries
# key: f-blocked
# --
/*
Queries that are “slow” or “hung”, check to see if they are waiting for another query to complete. 
Due to relation locking, other queries can lock a table and not let any other queries to access or change data until that query or transaction is done.
*/

SELECT * FROM pg_stat_activity 
WHERE wait_event IS NOT NULL AND backend_type = 'client backend';

\echo ################################################################################################################
\echo ==========>>>>>>>>>> Top 50 queries Sort by time.  Time is in Milliseconds.
\echo ################################################################################################################
select queryid as "QueryID", datname as "DB Name", ROUND(total_time::numeric, 2) as "Total Time(MS)", calls, rows as "Total Rows", rows_per_call as "Rows per Call",
  avg_time_per_call as "Avg Time per call(MS)",
  ROUND(blk_read_time::numeric, 2) as blk_read_time,
  ROUND(blk_write_time::numeric, 2) as blk_write_time, shared_blks_hit, shared_blks_read, local_blks_hit, local_blks_read,
 to_char(create_date, 'MM/DD/YYYY') AS "Day"
from db_stats_pg_stat_stmts
where (create_date >= (CURRENT_DATE - INTERVAL '1 days') and create_date < CURRENT_DATE)
order by avg_time_per_call desc limit 50;

\echo ####################################################################################################################
\echo ==========>>>>>>>>>> Top 50 queries Sort by Rows per Call.  Check the queries closely and add appropriate indices.
\echo ==========>>>>>>>>>> ****** Time is in Milliseconds.;
\echo ####################################################################################################################
select queryid as "QueryID", datname as "DB Name", calls, rows as "Total Rows", rows_per_call as "Rows per Call", ROUND(total_time::numeric, 2) as "Total Time(MS)", avg_time_per_call as "Avg Time per call(MS)", ROUND(blk_read_time::numeric, 2) as blk_read_time, ROUND(blk_write_time::numeric, 2) as blk_write_time, shared_blks_hit, shared_blks_read, local_blks_hit, local_blks_read, to_char(create_date, 'MM/DD/YYYY') AS "Day" from db_stats_pg_stat_stmts where (create_date >= (CURRENT_DATE - INTERVAL '1 days') and create_date < CURRENT_DATE) order by rows_per_call desc limit 50;
